/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Copyright (c) 2021, OPEN AI LAB
 * Author: lswang@openailab.com
 */

#pragma once

#include "utility/log.h"


// THIS PARTED WAS GENERATED BY CMAKE, DO NOT EDIT THIS FILE.
// ANY CHANGES WILL BE ERASED BY CMAKE REGENERATION.


// code generation start
extern int register_absval_ref_op();
extern int register_absval_hcl_arm_op();
extern int register_add_n_ref_op();
extern int register_argmax_ref_op();
extern int register_argmin_ref_op();
extern int register_batchnorm_ref_op();
extern int register_batchnorm_hcl_arm_op();
extern int register_batchtospacend_ref_op();
extern int register_bias_ref_op();
extern int register_broadmul_ref_op();
extern int register_cast_ref_op();
extern int register_ceil_ref_op();
extern int register_clip_ref_op();
extern int register_comparison_ref_op();
extern int register_concat_ref_op();
extern int register_conv_ref_op();
extern int register_conv_dw_hcl_arm_op();
extern int register_conv_hcl_arm_op();
extern int register_crop_ref_op();
extern int register_deconv_ref_op();
extern int register_depthtospace_ref_op();
extern int register_detection_output_ref_op();
extern int register_detection_postprocess_ref_op();
extern int register_dropout_ref_op();
extern int register_eltwise_ref_op();
extern int register_eltwise_hcl_arm_op();
extern int register_elu_ref_op();
extern int register_elu_hcl_arm_op();
extern int register_embedding_ref_op();
extern int register_expand_ref_op();
extern int register_expanddims_ref_op();
extern int register_fc_ref_op();
extern int register_fc_hcl_arm_op();
extern int register_flatten_ref_op();
extern int register_gather_ref_op();
extern int register_gelu_ref_op();
extern int register_gru_ref_op();
extern int register_hardsigmoid_ref_op();
extern int register_hardswish_ref_op();
extern int register_input_ref_op();
extern int register_instancenorm_ref_op();
extern int register_interp_ref_op();
extern int register_interp_hcl_arm_op();
extern int register_l2normalization_ref_op();
extern int register_l2pool_ref_op();
extern int register_logical_ref_op();
extern int register_logistic_ref_op();
extern int register_logsoftmax_ref_op();
extern int register_lrn_ref_op();
extern int register_lrn_hcl_arm_op();
extern int register_lstm_ref_op();
extern int register_matmul_ref_op();
extern int register_maximum_ref_op();
extern int register_mean_ref_op();
extern int register_minimum_ref_op();
extern int register_mish_ref_op();
extern int register_mish_hcl_arm_op();
extern int register_mvn_ref_op();
extern int register_noop_ref_op();
extern int register_normalize_ref_op();
extern int register_pad_ref_op();
extern int register_permute_ref_op();
extern int register_pooling_ref_op();
extern int register_pooling_hcl_arm_op();
extern int register_prelu_ref_op();
extern int register_priorbox_ref_op();
extern int register_psroipooling_ref_op();
extern int register_reciprocal_ref_op();
extern int register_reducel2_ref_op();
extern int register_reduction_ref_op();
extern int register_region_ref_op();
extern int register_relu_ref_op();
extern int register_relu_hcl_arm_op();
extern int register_relu1_ref_op();
extern int register_relu6_ref_op();
extern int register_reorg_ref_op();
extern int register_reshape_ref_op();
extern int register_resize_ref_op();
extern int register_reverse_ref_op();
extern int register_rnn_ref_op();
extern int register_roialign_ref_op();
extern int register_roipooling_ref_op();
extern int register_round_ref_op();
extern int register_rpn_ref_op();
extern int register_scale_ref_op();
extern int register_scatter_ref_op();
extern int register_selu_ref_op();
extern int register_selu_hcl_arm_op();
extern int register_shape_ref_op();
extern int register_shuffle_channel_ref_op();
extern int register_sigmoid_ref_op();
extern int register_sigmoid_hcl_arm_op();
extern int register_slice_ref_op();
extern int register_softmax_ref_op();
extern int register_softmax_hcl_arm_op();
extern int register_softplus_ref_op();
extern int register_spacetobatchnd_ref_op();
extern int register_spacetodepth_ref_op();
extern int register_sparsetodense_ref_op();
extern int register_spatialtransformer_ref_op();
extern int register_split_ref_op();
extern int register_squareddifference_ref_op();
extern int register_squeeze_ref_op();
extern int register_strided_slice_ref_op();
extern int register_swap_axis_ref_op();
extern int register_tanh_ref_op();
extern int register_tanh_hcl_arm_op();
extern int register_threshold_ref_op();
extern int register_tile_ref_op();
extern int register_topkv2_ref_op();
extern int register_transpose_ref_op();
extern int register_unary_ref_op();
extern int register_unsqueeze_ref_op();
extern int register_upsample_ref_op();
extern int register_where_ref_op();
extern int register_zeroslike_ref_op();
// code generation finish

// code generation start
extern int unregister_absval_ref_op();
extern int unregister_absval_hcl_arm_op();
extern int unregister_add_n_ref_op();
extern int unregister_argmax_ref_op();
extern int unregister_argmin_ref_op();
extern int unregister_batchnorm_ref_op();
extern int unregister_batchnorm_hcl_arm_op();
extern int unregister_batchtospacend_ref_op();
extern int unregister_bias_ref_op();
extern int unregister_broadmul_ref_op();
extern int unregister_cast_ref_op();
extern int unregister_ceil_ref_op();
extern int unregister_clip_ref_op();
extern int unregister_comparison_ref_op();
extern int unregister_concat_ref_op();
extern int unregister_conv_ref_op();
extern int unregister_conv_dw_hcl_arm_op();
extern int unregister_conv_hcl_arm_op();
extern int unregister_crop_ref_op();
extern int unregister_deconv_ref_op();
extern int unregister_depthtospace_ref_op();
extern int unregister_detection_output_ref_op();
extern int unregister_detection_postprocess_ref_op();
extern int unregister_dropout_ref_op();
extern int unregister_eltwise_ref_op();
extern int unregister_eltwise_hcl_arm_op();
extern int unregister_elu_ref_op();
extern int unregister_elu_hcl_arm_op();
extern int unregister_embedding_ref_op();
extern int unregister_expand_ref_op();
extern int unregister_expanddims_ref_op();
extern int unregister_fc_ref_op();
extern int unregister_fc_hcl_arm_op();
extern int unregister_flatten_ref_op();
extern int unregister_gather_ref_op();
extern int unregister_gelu_ref_op();
extern int unregister_gru_ref_op();
extern int unregister_hardsigmoid_ref_op();
extern int unregister_hardswish_ref_op();
extern int unregister_input_ref_op();
extern int unregister_instancenorm_ref_op();
extern int unregister_interp_ref_op();
extern int unregister_interp_hcl_arm_op();
extern int unregister_l2normalization_ref_op();
extern int unregister_l2pool_ref_op();
extern int unregister_logical_ref_op();
extern int unregister_logistic_ref_op();
extern int unregister_logsoftmax_ref_op();
extern int unregister_lrn_ref_op();
extern int unregister_lrn_hcl_arm_op();
extern int unregister_lstm_ref_op();
extern int unregister_matmul_ref_op();
extern int unregister_maximum_ref_op();
extern int unregister_mean_ref_op();
extern int unregister_minimum_ref_op();
extern int unregister_mish_ref_op();
extern int unregister_mish_hcl_arm_op();
extern int unregister_mvn_ref_op();
extern int unregister_noop_ref_op();
extern int unregister_normalize_ref_op();
extern int unregister_pad_ref_op();
extern int unregister_permute_ref_op();
extern int unregister_pooling_ref_op();
extern int unregister_pooling_hcl_arm_op();
extern int unregister_prelu_ref_op();
extern int unregister_priorbox_ref_op();
extern int unregister_psroipooling_ref_op();
extern int unregister_reciprocal_ref_op();
extern int unregister_reducel2_ref_op();
extern int unregister_reduction_ref_op();
extern int unregister_region_ref_op();
extern int unregister_relu_ref_op();
extern int unregister_relu_hcl_arm_op();
extern int unregister_relu1_ref_op();
extern int unregister_relu6_ref_op();
extern int unregister_reorg_ref_op();
extern int unregister_reshape_ref_op();
extern int unregister_resize_ref_op();
extern int unregister_reverse_ref_op();
extern int unregister_rnn_ref_op();
extern int unregister_roialign_ref_op();
extern int unregister_roipooling_ref_op();
extern int unregister_round_ref_op();
extern int unregister_rpn_ref_op();
extern int unregister_scale_ref_op();
extern int unregister_scatter_ref_op();
extern int unregister_selu_ref_op();
extern int unregister_selu_hcl_arm_op();
extern int unregister_shape_ref_op();
extern int unregister_shuffle_channel_ref_op();
extern int unregister_sigmoid_ref_op();
extern int unregister_sigmoid_hcl_arm_op();
extern int unregister_slice_ref_op();
extern int unregister_softmax_ref_op();
extern int unregister_softmax_hcl_arm_op();
extern int unregister_softplus_ref_op();
extern int unregister_spacetobatchnd_ref_op();
extern int unregister_spacetodepth_ref_op();
extern int unregister_sparsetodense_ref_op();
extern int unregister_spatialtransformer_ref_op();
extern int unregister_split_ref_op();
extern int unregister_squareddifference_ref_op();
extern int unregister_squeeze_ref_op();
extern int unregister_strided_slice_ref_op();
extern int unregister_swap_axis_ref_op();
extern int unregister_tanh_ref_op();
extern int unregister_tanh_hcl_arm_op();
extern int unregister_threshold_ref_op();
extern int unregister_tile_ref_op();
extern int unregister_topkv2_ref_op();
extern int unregister_transpose_ref_op();
extern int unregister_unary_ref_op();
extern int unregister_unsqueeze_ref_op();
extern int unregister_upsample_ref_op();
extern int unregister_where_ref_op();
extern int unregister_zeroslike_ref_op();
// code generation finish



/*!
 * @brief Register all cpu operators.
 *
 * @return statue value, 0 success, other value failure.
 */
int register_all_cpu_ops()
{
    int ret;
    // generated register functions
    // code generation start
    ret = register_absval_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_absval_ref_op()", ret);
    }
    ret = register_absval_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_absval_hcl_arm_op()", ret);
    }
    ret = register_add_n_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_add_n_ref_op()", ret);
    }
    ret = register_argmax_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_argmax_ref_op()", ret);
    }
    ret = register_argmin_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_argmin_ref_op()", ret);
    }
    ret = register_batchnorm_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_batchnorm_ref_op()", ret);
    }
    ret = register_batchnorm_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_batchnorm_hcl_arm_op()", ret);
    }
    ret = register_batchtospacend_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_batchtospacend_ref_op()", ret);
    }
    ret = register_bias_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_bias_ref_op()", ret);
    }
    ret = register_broadmul_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_broadmul_ref_op()", ret);
    }
    ret = register_cast_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_cast_ref_op()", ret);
    }
    ret = register_ceil_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_ceil_ref_op()", ret);
    }
    ret = register_clip_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_clip_ref_op()", ret);
    }
    ret = register_comparison_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_comparison_ref_op()", ret);
    }
    ret = register_concat_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_concat_ref_op()", ret);
    }
    ret = register_conv_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_conv_ref_op()", ret);
    }
    ret = register_conv_dw_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_conv_dw_hcl_arm_op()", ret);
    }
    ret = register_conv_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_conv_hcl_arm_op()", ret);
    }
    ret = register_crop_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_crop_ref_op()", ret);
    }
    ret = register_deconv_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_deconv_ref_op()", ret);
    }
    ret = register_depthtospace_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_depthtospace_ref_op()", ret);
    }
    ret = register_detection_output_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_detection_output_ref_op()", ret);
    }
    ret = register_detection_postprocess_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_detection_postprocess_ref_op()", ret);
    }
    ret = register_dropout_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_dropout_ref_op()", ret);
    }
    ret = register_eltwise_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_eltwise_ref_op()", ret);
    }
    ret = register_eltwise_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_eltwise_hcl_arm_op()", ret);
    }
    ret = register_elu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_elu_ref_op()", ret);
    }
    ret = register_elu_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_elu_hcl_arm_op()", ret);
    }
    ret = register_embedding_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_embedding_ref_op()", ret);
    }
    ret = register_expand_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_expand_ref_op()", ret);
    }
    ret = register_expanddims_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_expanddims_ref_op()", ret);
    }
    ret = register_fc_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_fc_ref_op()", ret);
    }
    ret = register_fc_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_fc_hcl_arm_op()", ret);
    }
    ret = register_flatten_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_flatten_ref_op()", ret);
    }
    ret = register_gather_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_gather_ref_op()", ret);
    }
    ret = register_gelu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_gelu_ref_op()", ret);
    }
    ret = register_gru_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_gru_ref_op()", ret);
    }
    ret = register_hardsigmoid_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_hardsigmoid_ref_op()", ret);
    }
    ret = register_hardswish_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_hardswish_ref_op()", ret);
    }
    ret = register_input_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_input_ref_op()", ret);
    }
    ret = register_instancenorm_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_instancenorm_ref_op()", ret);
    }
    ret = register_interp_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_interp_ref_op()", ret);
    }
    ret = register_interp_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_interp_hcl_arm_op()", ret);
    }
    ret = register_l2normalization_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_l2normalization_ref_op()", ret);
    }
    ret = register_l2pool_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_l2pool_ref_op()", ret);
    }
    ret = register_logical_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_logical_ref_op()", ret);
    }
    ret = register_logistic_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_logistic_ref_op()", ret);
    }
    ret = register_logsoftmax_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_logsoftmax_ref_op()", ret);
    }
    ret = register_lrn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_lrn_ref_op()", ret);
    }
    ret = register_lrn_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_lrn_hcl_arm_op()", ret);
    }
    ret = register_lstm_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_lstm_ref_op()", ret);
    }
    ret = register_matmul_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_matmul_ref_op()", ret);
    }
    ret = register_maximum_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_maximum_ref_op()", ret);
    }
    ret = register_mean_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mean_ref_op()", ret);
    }
    ret = register_minimum_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_minimum_ref_op()", ret);
    }
    ret = register_mish_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mish_ref_op()", ret);
    }
    ret = register_mish_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mish_hcl_arm_op()", ret);
    }
    ret = register_mvn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mvn_ref_op()", ret);
    }
    ret = register_noop_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_noop_ref_op()", ret);
    }
    ret = register_normalize_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_normalize_ref_op()", ret);
    }
    ret = register_pad_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_pad_ref_op()", ret);
    }
    ret = register_permute_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_permute_ref_op()", ret);
    }
    ret = register_pooling_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_pooling_ref_op()", ret);
    }
    ret = register_pooling_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_pooling_hcl_arm_op()", ret);
    }
    ret = register_prelu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_prelu_ref_op()", ret);
    }
    ret = register_priorbox_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_priorbox_ref_op()", ret);
    }
    ret = register_psroipooling_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_psroipooling_ref_op()", ret);
    }
    ret = register_reciprocal_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reciprocal_ref_op()", ret);
    }
    ret = register_reducel2_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reducel2_ref_op()", ret);
    }
    ret = register_reduction_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reduction_ref_op()", ret);
    }
    ret = register_region_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_region_ref_op()", ret);
    }
    ret = register_relu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu_ref_op()", ret);
    }
    ret = register_relu_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu_hcl_arm_op()", ret);
    }
    ret = register_relu1_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu1_ref_op()", ret);
    }
    ret = register_relu6_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu6_ref_op()", ret);
    }
    ret = register_reorg_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reorg_ref_op()", ret);
    }
    ret = register_reshape_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reshape_ref_op()", ret);
    }
    ret = register_resize_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_resize_ref_op()", ret);
    }
    ret = register_reverse_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reverse_ref_op()", ret);
    }
    ret = register_rnn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_rnn_ref_op()", ret);
    }
    ret = register_roialign_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_roialign_ref_op()", ret);
    }
    ret = register_roipooling_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_roipooling_ref_op()", ret);
    }
    ret = register_round_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_round_ref_op()", ret);
    }
    ret = register_rpn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_rpn_ref_op()", ret);
    }
    ret = register_scale_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_scale_ref_op()", ret);
    }
    ret = register_scatter_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_scatter_ref_op()", ret);
    }
    ret = register_selu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_selu_ref_op()", ret);
    }
    ret = register_selu_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_selu_hcl_arm_op()", ret);
    }
    ret = register_shape_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_shape_ref_op()", ret);
    }
    ret = register_shuffle_channel_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_shuffle_channel_ref_op()", ret);
    }
    ret = register_sigmoid_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_sigmoid_ref_op()", ret);
    }
    ret = register_sigmoid_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_sigmoid_hcl_arm_op()", ret);
    }
    ret = register_slice_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_slice_ref_op()", ret);
    }
    ret = register_softmax_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_softmax_ref_op()", ret);
    }
    ret = register_softmax_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_softmax_hcl_arm_op()", ret);
    }
    ret = register_softplus_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_softplus_ref_op()", ret);
    }
    ret = register_spacetobatchnd_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_spacetobatchnd_ref_op()", ret);
    }
    ret = register_spacetodepth_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_spacetodepth_ref_op()", ret);
    }
    ret = register_sparsetodense_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_sparsetodense_ref_op()", ret);
    }
    ret = register_spatialtransformer_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_spatialtransformer_ref_op()", ret);
    }
    ret = register_split_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_split_ref_op()", ret);
    }
    ret = register_squareddifference_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_squareddifference_ref_op()", ret);
    }
    ret = register_squeeze_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_squeeze_ref_op()", ret);
    }
    ret = register_strided_slice_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_strided_slice_ref_op()", ret);
    }
    ret = register_swap_axis_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_swap_axis_ref_op()", ret);
    }
    ret = register_tanh_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tanh_ref_op()", ret);
    }
    ret = register_tanh_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tanh_hcl_arm_op()", ret);
    }
    ret = register_threshold_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_threshold_ref_op()", ret);
    }
    ret = register_tile_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tile_ref_op()", ret);
    }
    ret = register_topkv2_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_topkv2_ref_op()", ret);
    }
    ret = register_transpose_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_transpose_ref_op()", ret);
    }
    ret = register_unary_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_unary_ref_op()", ret);
    }
    ret = register_unsqueeze_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_unsqueeze_ref_op()", ret);
    }
    ret = register_upsample_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_upsample_ref_op()", ret);
    }
    ret = register_where_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_where_ref_op()", ret);
    }
    ret = register_zeroslike_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_zeroslike_ref_op()", ret);
    }
    // code generation finish


    return ret;
}


/*!
 * @brief unregister all cpu operators.
 *
 * @return statue value, 0 success, other value failure.
 */
int unregister_all_cpu_ops()
{
    int ret;

    // generated unregister functions
    // code generation start
    ret = unregister_absval_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_absval_ref_op()", ret);
    }
    ret = unregister_absval_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_absval_hcl_arm_op()", ret);
    }
    ret = unregister_add_n_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_add_n_ref_op()", ret);
    }
    ret = unregister_argmax_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_argmax_ref_op()", ret);
    }
    ret = unregister_argmin_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_argmin_ref_op()", ret);
    }
    ret = unregister_batchnorm_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_batchnorm_ref_op()", ret);
    }
    ret = unregister_batchnorm_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_batchnorm_hcl_arm_op()", ret);
    }
    ret = unregister_batchtospacend_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_batchtospacend_ref_op()", ret);
    }
    ret = unregister_bias_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_bias_ref_op()", ret);
    }
    ret = unregister_broadmul_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_broadmul_ref_op()", ret);
    }
    ret = unregister_cast_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_cast_ref_op()", ret);
    }
    ret = unregister_ceil_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_ceil_ref_op()", ret);
    }
    ret = unregister_clip_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_clip_ref_op()", ret);
    }
    ret = unregister_comparison_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_comparison_ref_op()", ret);
    }
    ret = unregister_concat_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_concat_ref_op()", ret);
    }
    ret = unregister_conv_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_conv_ref_op()", ret);
    }
    ret = unregister_conv_dw_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_conv_dw_hcl_arm_op()", ret);
    }
    ret = unregister_conv_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_conv_hcl_arm_op()", ret);
    }
    ret = unregister_crop_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_crop_ref_op()", ret);
    }
    ret = unregister_deconv_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_deconv_ref_op()", ret);
    }
    ret = unregister_depthtospace_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_depthtospace_ref_op()", ret);
    }
    ret = unregister_detection_output_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_detection_output_ref_op()", ret);
    }
    ret = unregister_detection_postprocess_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_detection_postprocess_ref_op()", ret);
    }
    ret = unregister_dropout_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_dropout_ref_op()", ret);
    }
    ret = unregister_eltwise_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_eltwise_ref_op()", ret);
    }
    ret = unregister_eltwise_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_eltwise_hcl_arm_op()", ret);
    }
    ret = unregister_elu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_elu_ref_op()", ret);
    }
    ret = unregister_elu_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_elu_hcl_arm_op()", ret);
    }
    ret = unregister_embedding_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_embedding_ref_op()", ret);
    }
    ret = unregister_expand_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_expand_ref_op()", ret);
    }
    ret = unregister_expanddims_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_expanddims_ref_op()", ret);
    }
    ret = unregister_fc_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_fc_ref_op()", ret);
    }
    ret = unregister_fc_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_fc_hcl_arm_op()", ret);
    }
    ret = unregister_flatten_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_flatten_ref_op()", ret);
    }
    ret = unregister_gather_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_gather_ref_op()", ret);
    }
    ret = unregister_gelu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_gelu_ref_op()", ret);
    }
    ret = unregister_gru_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_gru_ref_op()", ret);
    }
    ret = unregister_hardsigmoid_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_hardsigmoid_ref_op()", ret);
    }
    ret = unregister_hardswish_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_hardswish_ref_op()", ret);
    }
    ret = unregister_input_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_input_ref_op()", ret);
    }
    ret = unregister_instancenorm_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_instancenorm_ref_op()", ret);
    }
    ret = unregister_interp_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_interp_ref_op()", ret);
    }
    ret = unregister_interp_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_interp_hcl_arm_op()", ret);
    }
    ret = unregister_l2normalization_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_l2normalization_ref_op()", ret);
    }
    ret = unregister_l2pool_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_l2pool_ref_op()", ret);
    }
    ret = unregister_logical_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_logical_ref_op()", ret);
    }
    ret = unregister_logistic_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_logistic_ref_op()", ret);
    }
    ret = unregister_logsoftmax_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_logsoftmax_ref_op()", ret);
    }
    ret = unregister_lrn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_lrn_ref_op()", ret);
    }
    ret = unregister_lrn_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_lrn_hcl_arm_op()", ret);
    }
    ret = unregister_lstm_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_lstm_ref_op()", ret);
    }
    ret = unregister_matmul_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_matmul_ref_op()", ret);
    }
    ret = unregister_maximum_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_maximum_ref_op()", ret);
    }
    ret = unregister_mean_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mean_ref_op()", ret);
    }
    ret = unregister_minimum_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_minimum_ref_op()", ret);
    }
    ret = unregister_mish_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mish_ref_op()", ret);
    }
    ret = unregister_mish_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mish_hcl_arm_op()", ret);
    }
    ret = unregister_mvn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_mvn_ref_op()", ret);
    }
    ret = unregister_noop_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_noop_ref_op()", ret);
    }
    ret = unregister_normalize_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_normalize_ref_op()", ret);
    }
    ret = unregister_pad_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_pad_ref_op()", ret);
    }
    ret = unregister_permute_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_permute_ref_op()", ret);
    }
    ret = unregister_pooling_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_pooling_ref_op()", ret);
    }
    ret = unregister_pooling_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_pooling_hcl_arm_op()", ret);
    }
    ret = unregister_prelu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_prelu_ref_op()", ret);
    }
    ret = unregister_priorbox_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_priorbox_ref_op()", ret);
    }
    ret = unregister_psroipooling_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_psroipooling_ref_op()", ret);
    }
    ret = unregister_reciprocal_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reciprocal_ref_op()", ret);
    }
    ret = unregister_reducel2_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reducel2_ref_op()", ret);
    }
    ret = unregister_reduction_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reduction_ref_op()", ret);
    }
    ret = unregister_region_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_region_ref_op()", ret);
    }
    ret = unregister_relu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu_ref_op()", ret);
    }
    ret = unregister_relu_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu_hcl_arm_op()", ret);
    }
    ret = unregister_relu1_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu1_ref_op()", ret);
    }
    ret = unregister_relu6_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_relu6_ref_op()", ret);
    }
    ret = unregister_reorg_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reorg_ref_op()", ret);
    }
    ret = unregister_reshape_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reshape_ref_op()", ret);
    }
    ret = unregister_resize_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_resize_ref_op()", ret);
    }
    ret = unregister_reverse_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_reverse_ref_op()", ret);
    }
    ret = unregister_rnn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_rnn_ref_op()", ret);
    }
    ret = unregister_roialign_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_roialign_ref_op()", ret);
    }
    ret = unregister_roipooling_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_roipooling_ref_op()", ret);
    }
    ret = unregister_round_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_round_ref_op()", ret);
    }
    ret = unregister_rpn_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_rpn_ref_op()", ret);
    }
    ret = unregister_scale_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_scale_ref_op()", ret);
    }
    ret = unregister_scatter_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_scatter_ref_op()", ret);
    }
    ret = unregister_selu_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_selu_ref_op()", ret);
    }
    ret = unregister_selu_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_selu_hcl_arm_op()", ret);
    }
    ret = unregister_shape_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_shape_ref_op()", ret);
    }
    ret = unregister_shuffle_channel_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_shuffle_channel_ref_op()", ret);
    }
    ret = unregister_sigmoid_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_sigmoid_ref_op()", ret);
    }
    ret = unregister_sigmoid_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_sigmoid_hcl_arm_op()", ret);
    }
    ret = unregister_slice_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_slice_ref_op()", ret);
    }
    ret = unregister_softmax_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_softmax_ref_op()", ret);
    }
    ret = unregister_softmax_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_softmax_hcl_arm_op()", ret);
    }
    ret = unregister_softplus_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_softplus_ref_op()", ret);
    }
    ret = unregister_spacetobatchnd_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_spacetobatchnd_ref_op()", ret);
    }
    ret = unregister_spacetodepth_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_spacetodepth_ref_op()", ret);
    }
    ret = unregister_sparsetodense_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_sparsetodense_ref_op()", ret);
    }
    ret = unregister_spatialtransformer_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_spatialtransformer_ref_op()", ret);
    }
    ret = unregister_split_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_split_ref_op()", ret);
    }
    ret = unregister_squareddifference_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_squareddifference_ref_op()", ret);
    }
    ret = unregister_squeeze_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_squeeze_ref_op()", ret);
    }
    ret = unregister_strided_slice_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_strided_slice_ref_op()", ret);
    }
    ret = unregister_swap_axis_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_swap_axis_ref_op()", ret);
    }
    ret = unregister_tanh_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tanh_ref_op()", ret);
    }
    ret = unregister_tanh_hcl_arm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tanh_hcl_arm_op()", ret);
    }
    ret = unregister_threshold_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_threshold_ref_op()", ret);
    }
    ret = unregister_tile_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tile_ref_op()", ret);
    }
    ret = unregister_topkv2_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_topkv2_ref_op()", ret);
    }
    ret = unregister_transpose_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_transpose_ref_op()", ret);
    }
    ret = unregister_unary_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_unary_ref_op()", ret);
    }
    ret = unregister_unsqueeze_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_unsqueeze_ref_op()", ret);
    }
    ret = unregister_upsample_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_upsample_ref_op()", ret);
    }
    ret = unregister_where_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_where_ref_op()", ret);
    }
    ret = unregister_zeroslike_ref_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_zeroslike_ref_op()", ret);
    }
    // code generation finish


    return 0;
}
